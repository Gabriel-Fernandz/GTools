#!/usr/bin/env python

"""board.

Usage:
  board (-l | --list)
  board (-r | --reset)
  board (-m | --mount)
  board (-s | --set)
  board --set <board>
  board (-h | --help)
  board --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  -l --list
  -m --mount
  -r --reset
  -s --set
"""


from docopt import docopt

import os
import subprocess
import json
import dialog
import glob
import termios

serial_port = os.environ.get('GTOOLS_TERM')
if serial_port is None:
	serial_port='/dev/ttyACM0'

gtools_path = os.environ.get('GTOOLS_PATH')
if gtools_path is None:
	print("GTOOLS_PATH not set !")
	exit (1)

dial = dialog.Dialog(dialog="dialog")

nom_fichier_conf = ".conf"

def Get_Board_List():

	repertoire = gtools_path + '/Boards/'
	tous_les_elements = glob.glob(os.path.join(repertoire, 'stm32mp*'))
	fichiers_stm32mp = [os.path.basename(fichier) for fichier in tous_les_elements if os.path.isfile(fichier)]

	fichiers_stm32mp.sort()

	return fichiers_stm32mp


def Display_Board_List(fichiers_stm32mp):
	for b in fichiers_stm32mp:
		print (".", b)

def Get_Board():

	fichiers_stm32mp = Get_Board_List()

	Boards = []

	for board in fichiers_stm32mp:
		status = True
		Boards.append((board, '', status))
		status = False

	code, s_board = dial.radiolist("Board list:", choices=Boards)

	if code == 'cancel':
		return None

	return s_board

def Board_save_config(nom):
	with open(nom_fichier_conf, 'w') as fichier_conf:
		fichier_conf.write(f"{nom}\n")

import termios
import serial

def board_reset():
	ser = serial.Serial(serial_port, 115200, timeout=1)
	fd = ser.fileno()
	termios.tcsendbreak(fd, 0)

import time

def mount_sdcard():
	ser = serial.Serial(serial_port, 115200, timeout=1)

	# Boucle de lecture de la console
	while True:
		# Lire une ligne de la console
		# line = ser.readline().decode('utf-8').strip()
		# line = ser.readline().decode('utf-8').rstrip() # Lecture des données et suppression des caractères de fin de ligne
		line = ser.read()
		# print(line)
		# line = ''
		# Vérifier si la ligne contient le prompt
		if 'Hit any key to stop autoboot' in line:
			# Envoyer la commande pour arrêter le démarrage automatique
			# ser.write(b"\0x3")

			# ser.write(b"\0x3")
			while True:
				ser.write(b'\03')

				time.sleep(0.5) # Pause de 0.5 seconde

				ser.write(b'ums 0 mmc 0\n')
				break


			# ser.write(b'  \n')
			# ser.write(b'ums 0 mmc 0\n')
			# break  # Sortir de la boucle de lecture
		# ser.write(b'\0x3')
			# ser.write(b'ums 0 mmc 0\n')

		# Afficher la ligne lue
	# Fermer la connexion série
	# ser.close()

# board = Get_Board()

# print (board)

def clear_screen():
	os.system("clear")

if __name__ == '__main__':
	arg = docopt(__doc__, version='go 1.0')

print (arg)

if arg['--list']:
	Display_Board_List(Get_Board_List())

elif arg['--reset']:
	board_reset()

elif arg['--mount']:
	board_reset()
	mount_sdcard()

elif arg['--set']:

	config_name = arg['<board>']

	if config_name != None:
		Board_save_config(config_name)
	else:
		config_name = Get_Board()
		Board_save_config(config_name)
		clear_screen()
